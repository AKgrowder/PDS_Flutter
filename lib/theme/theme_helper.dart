import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              6,
            ),
          ),
          shadowColor: appTheme.orangeA7000c,
          elevation: 24,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: colorScheme.onPrimary,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              6,
            ),
          ),
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray60001,
          fontSize: 10,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w300,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray50002,
          fontSize: 15,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 14,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w600,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    onPrimary: Color(0XFFFFFFFF),
    shadow: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0XAF434343),
    onTertiary: Color(0XAF434343),
    scrim: Color(0XFFF5F5F5),
    primaryContainer: Color(0XFFF5F5F5),
    tertiaryContainer: Color(0XFFED1C25),
    secondaryContainer: Color(0XFFED1C25),
    error: Color(0XFFFFFFFF),
    onErrorContainer: Color(0XFFFFFFFF),
    outline: Color(0XFFFFFFFF),
    onSurfaceVariant: Color(0XFFFFFFFF),
    onBackground: Color(0XAF434343),
    outlineVariant: Color(0XFFF5F5F5),
    errorContainer: Color(0XFFED1C25),
    onSurface: Color(0XAF434343),
    onError: Color(0XAF434343),
    surface: Color(0XFFF5F5F5),
    onInverseSurface: Color(0XAF434343),
    onSecondaryContainer: Color(0XFFFFFFFF),
    tertiary: Color(0XFFF5F5F5),
    surfaceTint: Color(0XFFFFFFFF),
    onTertiaryContainer: Color(0XFFFFFFFF),
    surfaceVariant: Color(0XFFED1C25),
    inversePrimary: Color(0XFFF5F5F5),
    secondary: Color(0XFFF5F5F5),
    inverseSurface: Color(0XFFFFFFFF),
    background: Color(0XFFF5F5F5),
    onSecondary: Color(0XAF434343),
    primary: Color(0XFFED1C25),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get primaryVariant => Color(0XFFF5F5F5);
  Color get secondaryVariant => Color(0XFFED1C25);
  Color get red100 => Color(0XFFFFD8DA);
  Color get red10001 => Color(0XFFFFD9DA);
  Color get gray500 => Color(0XFFADADAD);
  Color get gray100 => Color(0XFFF6F6F6);
  Color get orangeA7000c => Color(0X0CFF5A00);
  Color get gray600 => Color(0XFF7A7A7A);
  Color get gray60001 => Color(0XFF757575);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get red900 => Color(0XFF830006);
  Color get gray900 => Color(0XFF1D1D1D);
  Color get gray50001 => Color(0XFF8F8F8F);
  Color get blueGray50 => Color(0XFFF1F1F1);
  Color get blue400 => Color(0XFF329CFF);
  Color get deepOrange50 => Color(0XFFFFE6E7);
  Color get deepOrange5001 => Color(0XFFFFE7E7);
  Color get gray60002 => Color(0XFF858585);
  Color get teal400 => Color(0XFF1FA78B);
  Color get blueGray400 => Color(0XFF888888);
  Color get gray50002 => Color(0XFF979797);
  Color get black900 => Color(0XFF000000);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
